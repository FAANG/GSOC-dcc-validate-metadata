"""
Django settings for faang_gsoc project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
from decouple import config
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY","")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False if config("DEBUG") == "False" else True

ALLOWED_HOSTS = ['127.0.0.1','localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'channels',
    'ws',
    'rest_framework',
    'django_elasticsearch_dsl',
    'django_elasticsearch_dsl_drf',
    'graphql_ws.django',
    'graphene_django',
    'graphql_api',
    'nextflow_upload',
    'conversion',
    'validation'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS_ALLOWED_ORIGINS = ['http://localhost:4200']
CORS_ALLOW_ALL_ORIGINS = True
# CSRF_COOKIE_SECURE = False
GRAPHENE = {
    "SCHEMA": "graphql_api.schema.schema"
}

ELASTICSEARCH_HOST = config("ELASTICSEARCH_HOST",default="localhost")
ELASTICSEARCH_PORT = config("ELASTICSEARCH_PORT","9200")
ELASTICSEARCH_NODE_URL = f'{ELASTICSEARCH_HOST}:{ELASTICSEARCH_PORT}'

ELASTICSEARCH_DSL = {
    'default': {
        'hosts': ELASTICSEARCH_NODE_URL
    },
}


ROOT_URLCONF = 'faang_gsoc.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'faang_gsoc.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# redis url
REDIS_HOST = config("REDIS_HOST","localhost")
REDIS_PORT = config("REDIS_PORT","6379")
REDIS_URL = f"redis://{REDIS_HOST}:{REDIS_PORT}"

# amqp url
AMQP_HOST = config("AMQP_HOST","localhost")
AMQP_PORT = config("AMQP_PORT","5672")
AMQP_URL = f"amqp://{AMQP_HOST}:{AMQP_PORT}"

print(REDIS_HOST,AMQP_HOST)

# celery setup
CELERY_BROKER_URL = AMQP_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'

ASGI_APPLICATION = 'faang_gsoc.routing.application'


CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            # "hosts": [('127.0.0.1', 6379)],
            "hosts": [(REDIS_HOST, REDIS_PORT)],
        },
    },
}


BOVREG_BIOSAMPLES_USERNAME_PROD = 'bovreg_bio_uname'
BOVREG_USERNAME = 'bovreg_uname'
BOVREG_PASSWORD = 'bovreg_pwd'
BOVREG_BIOSAMPLES_USERNAME_TEST = 'bovreg_bio_uname_test'
BOVREG_BIOSAMPLES_PASSWORD_TEST = 'bovreg_bio_test'
BOVREG_BIOSAMPLES_PASSWORD_PROD = 'bovreg_bio_prod'